
- 2020/12/14

- 设计模式 结构型 适配器模式

概述 ：作为两个不兼容接口的桥梁

通过定义一个新的接口和实现这个接口的Adapter适配器类，来透明调用外部组件，这样替换时，只需要修改几个Adapter类就可以，其他源码不需要受到影响

意图 ：将接口转换为客户希望的另外一个接口 适配器模式使得原本由于接口不兼容而不能一起工作的那些类一起工作

主要解决 ：软件系统中 常常出现现有对象放入新环境中 新环境要求接口对现有对象不能满足

何时使用 ：
1.系统需要使用现有的类，而此类的接口不符合系统需要；
2.想要建立一个可以重复使用的类，用于彼此关联不大，包含可能将会引进的其他类一起工作，类不一定有一致接口；
3.接口转换，将一个类插入另外一个类系中；

优点 ：
1.可以让任何两个无关联类一起运行；
2.提高类的复用；
3.提高类的透明度；
4.灵活性好；

缺点 ：
1.过多使用适配器，会让系统非常凌乱，不易整体进行把握；
2.由于Java至多继承一个类，所以至多适配一个适配者类，而且目标类必须是抽象类；

注意 ：
如果没有必要，可以不使用适配器，而是直接对系统进行重构
适配器不是在详细设计中添加的，而是解决正在服役的项目问题