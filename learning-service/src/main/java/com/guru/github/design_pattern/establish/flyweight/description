- 2020/12/16

- 设计模式 结构型 享元模式

- 减少创建对象的数量，以减少内存占用和提高性能

尝试重用现有的同类的对象，如果未找到匹配对象，则创建新对象

意图：运用共享技术 有效地支持大量细粒度对象

主要解决：有大量对象时，有可能会造成内存溢出，我们把其中部分属性抽出来，如果有相同业务请求，直接返回内存中已有对象，避免重新创建

何时使用：
1.系统有大量对象
2.对象消耗大量内存
3.对象大部分可以外部化
4.对象可以按照内蕴状态分为多组，每组对象可以用一个对象代替
5.系统不依赖这些对象身份，这些对象不可分辨

如何解决：用唯一标识，如果内存有直接对应对象

关键代码：用HashMap存储这些对象

应用实例：
1.Java中的String字符缓存池
2.数据库的数据池

优点：
大大减少了对象的创建，降低系统的内存，使效率提高

缺点：提高系统的复杂度，需要分离外部状态和内部状态，而且外部状态具有固有化性质，不应该内部状态变化而变化，否则会造成系统混乱

使用场景：1.系统有大量相似对象 2.需要缓冲池场景

注意事项：
注意划分内部和外部状态，否则可能会引起线程安全问题
这些类必须有一个工厂对象加以控制