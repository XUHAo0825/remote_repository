- 2020/12/18

- 设计模式 行为型 命令模式

- 数据驱动设计模式，请求以命令的形式包裹在对象中，并传给调用对象

调用对象寻找可以该命令的合适对象，并把该命令传给相应对象，对象执行命令

意图：请求封装对象，从而使您可以用不同的请求对客户进行参数化

主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，某些场景下，比如需要对行为进行记录，撤销、重做、事务等处理时，
这种无法抵御变化的紧耦合设计就不合适

何时使用：在某些场合，比如要对行为进行 记录、撤销、重做、事务等处理，这种无法抵御变化的紧耦合是最不合适的，在这种情况下，如何进行请求者与行为实现者解耦
将一组行为抽象为对象，可以实现二者之间的耦合

如何解决：通过调用者调用接受者执行命令，顺序：调用者-命令-接收者

应用实例：struct1中的action核心控制器 ActionServlet 只有一个，相当于Invoker,而模型层的类会随着不同的应用随着不同的应用有不同的模型类，相当于有
具体的Command

优点：降低耦合度，新的命令容易添加到系统中去

缺点：使用命令模式可能会导致某些系统有过多的具体命令类

使用场景：认为是命令的地方，比如GUI的每一个按钮都是一个命令，模拟CMD

注意事项：系统需要支持命令的撤销Undo和Redo操作，也可以考虑使用命令模式