2020-12-28

设计模式 创建型 工厂模式

Java最常用设计模式之一 这种类型的设计模式属于创建型设计模式，它提供了一种创建对象的最佳方式

在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象

意图：定义一个创建对象的接口，让其子类自己决定实例化哪个工厂类，工厂模式使其创建过程延迟到子类进行

主要解决：主要解决接口选择的问题

何时使用：我们明确地计划不同条件下创建不同的实例对象

如何解决：让其子类实现工厂接口，返回也是一个抽象的产品

关键代码：创建过程让其子类执行

应用实例：你需要一辆汽车，直接从工厂里面提货，而不用去管汽车从哪里做出来的，以及这汽车具体实现；
hibernate换数据库只需换方言和驱动就可以

优点：1.调用者想创建一个对象，只要知道其名称就可以了
2.扩展性高，如果增加一个产品，只要拓展一个工厂类就可以
3.屏蔽产品的具体实现，调用者只关心产品的接口

缺点：每次增加一个产品需要增加一个具体类和对象实现工厂，使其系统中类的个数成倍增加
一定程度中增加了系统的复杂度 同时也增加了系统具体类的依赖

使用场景：1.日志记录器 2.数据库访问 3.设计一个连接服务器的框架

注意事项：作为一种创建型，在任何需要生成复杂对象的地方，都可以使用工厂方法模式
有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过new就可以完成创建的对象，无需使用工厂模式
如果使用工厂模式，就需要引用工厂类，会增加系统的复杂度