2020-12-19

设计模式 行为型 解释器模式

评估语言的语法和表达式的方法

实现一个表现式接口，该接口解释一个特定的上下文

意图：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子

主要解决：对于一些固定文法构建一个解释句子的解释器

何时使用：如果一种特定类型的问题发生频率足够高，那么可能就值得将该问题的各个实例表述为简单语言中的句子，这样构建一个解释器，
该解释器通过解释这些句子来解决这个问题

如何解决：构建语法树，定义终结符和非终结符；

关键代码：构建环境类，包含解释器之外的一些全局信息，一般是HashMap

应用场景：编译器或是运算表达式计算；

优点：可扩展性比较好灵活；增加了新的解释表达式的方式；易于简单实现方法

缺点：可利用场景比较少；对于复杂的文法比较难维护；解释器模式引起类膨胀；解释器模式采用递归调用方法

使用场景：可以将一个需要解释执行的语言中的句子表示为一个抽象语法树 一些重复出现的问题可以用一种简单的语言来进行表示；一个简单语法需要解释的场景

注意事项：可利用场景比较少，Java中碰到可以用expression4J代替