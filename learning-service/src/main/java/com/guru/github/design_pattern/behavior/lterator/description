- 2020/12/17

- 设计模式 行为型 迭代器模式

非常常用设计模式 用于顺序访问集合对象的元素，不需要知道集合对象的底层表示

意图：提供一种方法顺序访问一个聚合对象中各个元素，而又不需要暴露这个对象的内部表示

主要解决：不同方法遍历整个整合对象

何时使用：遍历一个聚合对象

如何解决：把在元素之间游走的责任交给迭代器，而不是聚合对象

关键代码：定义接口，hasNext，next

应用实例：Java中的iterator

优点：
1.它支持以不同的方法遍历一个聚合对象
2.迭代器简化了聚合类
3.同一个聚合可以有多个遍历
4.在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须改变代码

缺点：
由于迭代器模式将存储数据和遍历数据职责分离，增加了新聚合类需要对象增加新的迭代器类，类的个数成对增加，在一定程度提高系统负责度

使用场景：
访问一个聚合对象的内容，无须暴露内部表示
需要为聚合对象提供多种遍历方式
为遍历不同的聚合结构提供一个统一的接口

注意事项：
1.迭代器模式就是分离集合对象的遍历行为，抽象出一个迭代器负责，这样既可以不暴露集合内部结构，又可让外部代码透明访问集合内部的数据。
