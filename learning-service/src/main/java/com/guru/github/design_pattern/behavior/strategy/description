
- 2020/12/17

- 设计模式 行为型 策略模式

一个类的行为或其算法可以在运行时更改

我们在创建表示各种策略对象和一个行为随着策略对象改变而改变的context对象 策略对象改变context对象的执行算法

意图：定义一系列算法，把它们一个个封装起来，并且使它们可相互替代

主要解决：在多种算法相似的情况下，使用if else所带来的复杂和难以维护

何时使用：一个系统有许多许多类，区分它们是按照它们的直接行为

如何解决：将算法封装成一个个类 任意替换

关键代码：实现同一个接口

应用实例：
1.JAVA AWT的LayoutManager
2.旅游出行选择交通工具

优点：算法可以自由切换；避免使用多重判断；拓展性良好

缺点：策略类会增多；所有策略类都需要对外暴露

使用场景：一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态让一个对象在许多行为中选择一种
系统需要几种算法中的一种
对象有很多行为，如果不用恰当模式，这些行为就只好使用多重选择语句来实现

注意事项：如果一个系统策略高于四个，可以考虑使用混合模式，解决策略类膨胀问题；