- 2020/12/17

- 设计模式 行为型 责任链模式

为请求创建一个接受者对象的链，这个模式给予请求的类型，对请求的发送者和接受者进行解耦

这个模式中，通常每个接收者都包含另外一个接收者的引用，如果一个对象不能处理这个请求，他会把相同请求传给下一个接受者

意图：避免请求发送者和处理者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条线，并且沿着这条链传递请求，直到对象处理它为止

主要解决：责任链上处理者主要负责处理请求，客户只需要将请求发送到职责链中，无须关心请求的处理细节和请求的传递，所以职责链请求的发送者和请求者解耦了

何时使用：处理信息的时候 过滤很多道

如何解决：拦截的类都实现统一的接口

关键代码：Handler里面聚合它自己 在HandlerRequest判断是否合适，如果没达到条件则向下传递，向谁传递之前set进去

应用实例：JS中的事件冒泡；JavaWeb中ApacheTomcat对Encoding的处理；Struts2的拦截器；JspServlet的Filter

优点：1.减低耦合度。它将请求的发送者和接受者解耦
2.简化对象，使得对象不需要知道链的结构
3.增强对对象指派的职责的灵活性。通过改变链内的成员或者调动他们的次序，允许动态新增或者删除责任
4.增加新的请求处理类很方便

缺点：1.不能保证请求一定被接收
2.系统性能将受到一定影响，而且进行代码调试时不太方便，可能会造成循环引用
3.可能不容易观察运行时的特征，有碍于走查错误；

使用场景：1.有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动决定
2.不明确指定接受者的情况下，向多个对象中的一个提交一个请求
3.可动态指定一组处理请求

注意事项：在JavaWeb中遇到很多应用

