2020-12-28

设计模式 创建型 单例模式

Java中最简单的设计模式之一 提供一种最佳创建对象模式

涉及到单一的类，该类负责创建自己的对象 同时确保只有单个对象被创建
这个类提供一种访问其唯一的对象方式，可以直接访问，不需要实例化该类的对象

注意：单例类只能有一个实例 单例类必须要自己创建自己的唯一实例 3单例类必须给所有其他对象提供这一实例

意图：保证一个类仅有这一个实例，并提供访问他的全局访问点

主要解决：一个全局使用的类频繁的创建和销毁

何时使用：当您想控制实例数目，节省系统资源的时候

如何解决：判断系统是否已经有这个单例，如果有返回，没有则创建

关键代码：构造函数私有

应用实例：一个班级一个班主任 window是多进程多线程的，在操作一个文件时，就不可避免出现多进程或线程同时操作一个文件对象的情况，所以所有文件的处理必须
通过唯一的实例进行

优点：内存里只有一个实例，减少内存的开销，尤其是频繁创建和销毁实例
避免资源的多重占用（例 写文件操作）

缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外部怎样实例化

使用场景：要求生成唯一序列号 web的计数器，不用每次刷新都在数据库加一次，用单例缓存起来
创建一个对象需要消耗资源过多，比如I/O与数据库的连接等

注意事项：getInstance()方法中需要使用同步锁，防止多线程同时进入，造成instance被多次实例化

