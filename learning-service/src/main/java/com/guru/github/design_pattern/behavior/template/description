- 2020/12/17

- 设计模式 行为型 模板模式

一个抽象类公开定义了执行它的方法的模板，它的子类可以按照需要重写，但调用以抽象类中定义的方式进行

意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法的接口即可重定义该算法的某些特定步骤

主要解决：一些方法通用，却在每一个子类都重新写这个方法

何时使用：有一些通用方法

关键代码：在抽象类实现，其他步骤在子类实现

应用实例：
1.西游记的81难，定好的顶级逻辑骨架，
2。spring对hibernate的支持，将一些已经定好的方法封装起来，例如开启事务，获取session,关闭session
3.程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存

优点：封装不变部分，扩展可变部分；提取公共代码，便于维护；行为由父类控制，子类负责实现；

缺点：每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大

使用场景：有多个子类共有方法，逻辑相同，重要的、复杂的方法，可以考虑作为模板方法

注意事项：为防止恶意操作，一般模板方法都加上final关键词