2020-12-29

设计模式 创建型 原型模式
用于创建重复对象 同时又要保证性能
实现了一个原型接口，该接口用于创建当前对象的克隆，当直接创建对象的代价比较大时，则采用这种模式
例如一个对象需要在一个高代价的数据库操作之后被创建，我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此减少数据库调用。

意图：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象

主要解决：在运行期建立和删除原型

何时使用：1.当系统应该独立于它的产品创建、构成和表示时
2.当要实例化的类是在运行时指定，如动态加载
3.为了避免创建一个与产品类层平行的工厂类层次时
4.一个类的实例只能有几个不同状态组合中一种时，建立相应数目的原型并克隆他们可能比每次用合适状态手工实例化更方便一些

如何解决：利用已有的一个原型对象，快速生成和原型对象一样的实例

关键代码：实现克隆操作，在Java继承cloneable,重写clone(),实现对象的浅拷贝或通过序列化的方式来实现深拷贝
原型模式同样用于隔离对象的使用者和具体类型之间的耦合关系，它同样要求这些易变类具有稳定接口

实例：细胞分裂，Java中的clone方法

优点：性能提高，避免构造函数的约束

缺点：配备克隆方法需要对类的功能进行通盘考虑，这对全新的类不是很难，但对于已有类不一定容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候
2.必须实现cloneable接口

使用场景：1.资源优化场景 2.类初始化需要消化非常多的资源 3.性能和安全要求的场景
4.通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式
5.一个对象多个修改者的场景
6.一个对象需要提供给其他对象访问，并且各个调用者可能都需要修改其值时，可以考虑原型模式拷贝多个对象供调用者
7.实际项目中，原型模式很少单独出现，一般是和工厂模式一起出现 通过clone方法创建一个对象 然后由工厂方式提供给调用者，原型模式已经与Java融为一体，大家可以随时拿来使用

注意事项：通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象，浅拷贝实现cloneable，重写，深拷贝是通过实现serializable读取二进制流。