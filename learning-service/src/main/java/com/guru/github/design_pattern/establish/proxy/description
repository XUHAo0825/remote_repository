- 2020/12/16

- 设计模式 结构型 代理模式

一个类代表另外一个类

意图：为其他对象提供一种代理以控制到这个对象的访问

主要解决：
1.直接访问对象时带来的问题，比如：访问对象在远程机器上。在面向对象系统中，有些对象由于某些原因（对象创建开销大，操作需要安全控制
    ，或者需要进程外的访问），直接访问会让使用者或者系统带来很多麻烦，我们可以访问此对象时加个对此对象的访问层

何时使用：想在访问一个类时做一些控制

如何解决：增加中间层

关键代码：实现与被代理类组合

应用实例：
1. Windows里面的快捷键
2. 买火车票不一定在火车站，可以在售票点
3. 一张支票或银行是账户资金的代理，支票在市场交易中用来替代现金，并提供签发人账号资金控制
4. spring aop控制

优点：
1.职责清晰
2.高扩展性
3.智能化

缺点：
1.由于是在客户端和真实主题之间添加代理对象，因为有一些类型的代理模式可能会造成请求处理的速度变慢
2.实现代理模式需要额外的工作，一些代理模式的实现非常复杂

使用场景：
1.远程代理 2.虚拟代理 3.Copy-on-Write代理 4.保护代理 5.Cache代理 6.防火墙代理 7.同步化代理 8.智能引用代理

注意事项：
1.和适配器模式的区别：适配器模式主要考虑对象的接口，而代理模式不能改变代理类的接口
2.和装饰器模式区别：装饰器为了增强功能，而代理模式为了加以控制