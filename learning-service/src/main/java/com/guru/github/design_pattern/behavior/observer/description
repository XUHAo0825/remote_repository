- 2020/12/17

- 设计模式 行为型 观察者模式

当对象存在一对多关系时，使用观察者模式
例如 当一个对象被修改时，则会自动通知它依赖的对象。

意图：定义一个对象间的一对一依赖关系，当一个对象的状态发生改变时，所有依赖它的对象都得到通知并被自动更新；

主要解决：一个对象的状态发生改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度协作

何时使用：一个目标对象发生改变，所有依赖对象都将得到通知，进行广播通知

如何解决：使用面向对象技术，可以将这种关系弱化

关键代码：在抽象类里有一个ArrayList存放观察者们

应用实例：拍卖时，观察最高标价，然后通知给其他竞价者标价

优点：观察者和被观察者都是抽象耦合的；建立一套触发机制

缺点：
1.如果一个被观察者有很多直接或间接观察者的话，将所有观察者都通知需要很多时间
2.如果观察者和观察目标之间有循环依赖的话，观察目标会触发循环调用，可能导致系统崩溃
3.观察者模式没有相应的机制让观察者知道观察目标对象怎么发生变化的，而仅仅只是知道观察目标发生了变化

使用场景：
1.一个抽象模型有两个方面，其中一个方面依赖另外一个方面。将这些方面封装在独立的对象中，使它们可以独立改变和复用
2.一个对象的改变将导致其他或多个对象发生变化，而不知道具体有多少个对象发生改变，可以降低对象之间的耦合
3.一个对象必须通知其他对象，而并不知道这些对象是谁
4.需要在系统中创建一个触发链，A对象的行为会影响B对象，B对象会影响C对象 可以使用观察者模式创建一种链式触发机制

注意事项：
1.Java中已经有了对观察者模式的支持类
2.避免循环引用
3.如果按顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式


